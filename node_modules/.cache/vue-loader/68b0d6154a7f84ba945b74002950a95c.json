{"remainingRequest":"C:\\Users\\Arjun\\Desktop\\covidapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Arjun\\Desktop\\covidapp\\src\\App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"C:\\Users\\Arjun\\Desktop\\covidapp\\src\\App.vue","mtime":1587479803566},{"path":"C:\\Users\\Arjun\\Desktop\\covidapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Arjun\\Desktop\\covidapp\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Arjun\\Desktop\\covidapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Arjun\\Desktop\\covidapp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}